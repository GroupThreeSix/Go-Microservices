name: CI Pipeline

on:
  workflow_dispatch:  # Manual trigger
    inputs:
      build_all:
        description: 'Build all services'
        type: boolean
        default: true
      environment:
        description: 'Deploy environment'
        type: choice
        options:
          - staging
          - release
        default: 'staging'
  push:
    branches: 
      - master    # Will trigger release builds
      - staging   # Will trigger staging builds
    paths:
      - 'product-service/**'
      - 'inventory-service/**'
      - 'order-service/**'
      - 'api-gateway/**'
      - 'proto/**'
      - 'VERSION'

permissions: write-all

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      product-service: ${{ steps.filter.outputs.product-service }}
      inventory-service: ${{ steps.filter.outputs.inventory-service }}
      order-service: ${{ steps.filter.outputs.order-service }}
      api-gateway: ${{ steps.filter.outputs.api-gateway }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            product-service:
              - 'product-service/**'
              - 'proto/**'
              - 'VERSION'
            inventory-service:
              - 'inventory-service/**'
              - 'proto/**'
              - 'VERSION'
            order-service:
              - 'order-service/**'
              - 'proto/**'
              - 'VERSION'
            api-gateway:
              - 'api-gateway/**'
              - 'proto/**'
              - 'VERSION'

  build-and-test:
    needs: detect-changes
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: [product-service, inventory-service, order-service, api-gateway]
    
    steps:
      - name: Check if build needed
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] || \
             [[ "${{ matrix.service }}" == "product-service" && "${{ needs.detect-changes.outputs.product-service }}" == "true" ]] || \
             [[ "${{ matrix.service }}" == "inventory-service" && "${{ needs.detect-changes.outputs.inventory-service }}" == "true" ]] || \
             [[ "${{ matrix.service }}" == "order-service" && "${{ needs.detect-changes.outputs.order-service }}" == "true" ]] || \
             [[ "${{ matrix.service }}" == "api-gateway" && "${{ needs.detect-changes.outputs.api-gateway }}" == "true" ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

      - name: Checkout code
        if: steps.check.outputs.should_build == 'true'
        uses: actions/checkout@v4

      - name: Set up Go
        if: steps.check.outputs.should_build == 'true'
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Set up Protobuf Go GRPC
        if: steps.check.outputs.should_build == 'true'
        run: |
          sudo apt-get update && sudo apt-get install -y protobuf-compiler

          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Generate Protobuf
        if: steps.check.outputs.should_build == 'true'
        run: |
          chmod +x scripts/gen-proto.sh
          ./scripts/gen-proto.sh

      - name: Set up Docker Buildx
        if: steps.check.outputs.should_build == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Manual Trivy Setup
        if: steps.check.outputs.should_build == 'true'
        uses: aquasecurity/setup-trivy@v0.2.0
        with:
          cache: true
          version: v0.57.1
          
      - name: Login to Docker Registry
        if: steps.check.outputs.should_build == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - name: Read version
        if: steps.check.outputs.should_build == 'true'
        id: version
        run: |
          VERSION=$(cat VERSION)
          if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format in VERSION file. Must be in format x.y.z (e.g., 1.0.0)"
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set image tag
        if: steps.check.outputs.should_build == 'true'
        id: set-tag
        run: |
          if [ "${{ github.ref }}" == "refs/heads/master" ] || [ "${{ github.event.inputs.environment }}" == "release" ]; then
            IMAGE_TAG="v${{ steps.version.outputs.version }}"
          else
            IMAGE_TAG="v${{ steps.version.outputs.version }}-alpha.${{ github.run_number }}"
          fi
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build and Push Service
        if: steps.check.outputs.should_build == 'true'
        run: |
          # Set up tags based on branch/environment
          if [ "${{ github.ref }}" == "refs/heads/master" ] || [ "${{ github.event.inputs.environment }}" == "release" ]; then
            TAGS="-t ${{ secrets.REGISTRY }}/${{ matrix.service }}:${{ steps.set-tag.outputs.image_tag }} \
                  -t ${{ secrets.REGISTRY }}/${{ matrix.service }}:latest \
                  -t ${{ secrets.REGISTRY }}/${{ matrix.service }}:stable"
          else
            TAGS="-t ${{ secrets.REGISTRY }}/${{ matrix.service }}:${{ steps.set-tag.outputs.image_tag }} \
                  -t ${{ secrets.REGISTRY }}/${{ matrix.service }}:staging"
          fi
          
          # Build image
          docker buildx build \
            --cache-from=type=gha,scope=${{ matrix.service }} \
            --cache-to=type=gha,mode=max,scope=${{ matrix.service }} \
            --platform linux/amd64 \
            $TAGS \
            -t ${{ matrix.service }}:scan-target \
            --load \
            ${{ matrix.service }}

      - name: Run Trivy vulnerability scanner (SARIF)
        if: steps.check.outputs.should_build == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ matrix.service }}:scan-target'
          format: 'sarif'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          output: '${{ matrix.service }}-sarif.json'
          skip-setup-trivy: true

      # Continue with image pushing
      - name: Push Images
        if: steps.check.outputs.should_build == 'true'
        run: |
          docker push ${{ secrets.REGISTRY }}/${{ matrix.service }}:${{ steps.set-tag.outputs.image_tag }}
          if [ "${{ github.ref }}" == "refs/heads/master" ] || [ "${{ github.event.inputs.environment }}" == "release" ]; then
            docker push ${{ secrets.REGISTRY }}/${{ matrix.service }}:latest
            docker push ${{ secrets.REGISTRY }}/${{ matrix.service }}:stable
          else
            docker push ${{ secrets.REGISTRY }}/${{ matrix.service }}:staging
          fi

      - name: Upload Trivy scan results to GitHub Security tab
        if: steps.check.outputs.should_build == 'true'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: '${{ matrix.service }}-sarif.json'
          category: 'trivy-${{ matrix.service }}-results'
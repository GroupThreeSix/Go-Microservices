name: CI Pipeline

on:
  workflow_dispatch:  # Manual trigger
    inputs:
      build_all:
        description: 'Build all services'
        type: boolean
        default: true
      environment:
        description: 'Deploy environment'
        type: choice
        options:
          - staging
          - release
        default: 'staging'
  push:
    branches: 
      - master    # Will trigger release builds
      - staging   # Will trigger staging builds
    paths:
      - 'product-service/**'
      - 'inventory-service/**'
      - 'order-service/**'
      - 'api-gateway/**'
      - 'proto/**'
      - 'VERSION'


jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      product-service: ${{ steps.filter.outputs.product-service }}
      inventory-service: ${{ steps.filter.outputs.inventory-service }}
      order-service: ${{ steps.filter.outputs.order-service }}
      api-gateway: ${{ steps.filter.outputs.api-gateway }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            product-service:
              - 'product-service/**'
              - 'proto/**'
              - 'VERSION'
            inventory-service:
              - 'inventory-service/**'
              - 'proto/**'
              - 'VERSION'
            order-service:
              - 'order-service/**'
              - 'proto/**'
              - 'VERSION'
            api-gateway:
              - 'api-gateway/**'
              - 'proto/**'
              - 'VERSION'

  build-and-test:
    needs: detect-changes
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Set up Protobuf Go GRPC
        run: |
          sudo apt-get update && sudo apt-get install -y protobuf-compiler

          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Generate Protobuf
        run: |
          chmod +x scripts/gen-proto.sh
          ./scripts/gen-proto.sh

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - name: Read version
        id: version
        run: |
          VERSION=$(cat VERSION)
          if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format in VERSION file. Must be in format x.y.z (e.g., 1.0.0)"
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set image tag
        id: set-tag
        run: |
          if [ "${{ github.ref }}" == "refs/heads/master" ] || [ "${{ github.event.inputs.environment }}" == "release" ]; then
            IMAGE_TAG="v${{ steps.version.outputs.version }}"
          else
            IMAGE_TAG="v${{ steps.version.outputs.version }}-alpha.${{ github.run_number }}"
          fi
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build and Push Changed Services
        run: |          
          build_and_push_service() {
            local service=$1
            echo "Building $service..."
            
            # Define tags based on branch or manual trigger
            if [ "${{ github.ref }}" == "refs/heads/master" ] || [ "${{ github.event.inputs.environment }}" == "release" ]; then
              # For release builds (master branch or manual release)
              docker buildx build \
                --cache-from=type=gha,scope=$service \
                --cache-to=type=gha,mode=max,scope=$service \
                --platform linux/amd64 \
                -t ${{ secrets.REGISTRY }}/$service:${{ steps.set-tag.outputs.image_tag }} \
                -t ${{ secrets.REGISTRY }}/$service:latest \
                -t ${{ secrets.REGISTRY }}/$service:stable \
                --push \
                $service
            else
              # For staging builds (staging branch or manual staging)
              docker buildx build \
                --cache-from=type=gha,scope=$service \
                --cache-to=type=gha,mode=max,scope=$service \
                --platform linux/amd64 \
                -t ${{ secrets.REGISTRY }}/$service:${{ steps.set-tag.outputs.image_tag }} \
                -t ${{ secrets.REGISTRY }}/$service:staging \
                --push \
                $service
            fi
          }
          
          # Build all services if manually triggered, otherwise only build changed services
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "Building all services..."
            build_and_push_service "product-service"
            build_and_push_service "inventory-service"
            build_and_push_service "order-service"
            build_and_push_service "api-gateway"
          else
            if [ "${{ needs.detect-changes.outputs.product-service }}" == "true" ]; then
              build_and_push_service "product-service"
            fi
            
            if [ "${{ needs.detect-changes.outputs.inventory-service }}" == "true" ]; then
              build_and_push_service "inventory-service"
            fi
            
            if [ "${{ needs.detect-changes.outputs.order-service }}" == "true" ]; then
              build_and_push_service "order-service"
            fi
            
            if [ "${{ needs.detect-changes.outputs.api-gateway }}" == "true" ]; then
              build_and_push_service "api-gateway"
            fi
          fi